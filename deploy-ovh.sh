#!/bin/bash

# üöÄ Script de d√©ploiement pour OVH
# Ce script aide √† automatiser le d√©ploiement et la mise √† jour

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
APP_NAME="covoiturage-api"
APP_DIR="$HOME/apps/projet-covoiturage/backend"
PM2_NAME="covoiturage-api"

echo -e "${BLUE}üöÄ Script de d√©ploiement OVH - Covoiturage API${NC}\n"

# Fonction pour afficher un message de succ√®s
success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# Fonction pour afficher un message d'erreur
error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction pour afficher un message d'info
info() {
    echo -e "${YELLOW}‚ÑπÔ∏è  $1${NC}"
}

# V√©rifier si on est dans le bon r√©pertoire
check_directory() {
    if [ ! -f "package.json" ]; then
        error "Ce script doit √™tre ex√©cut√© depuis le r√©pertoire backend"
        exit 1
    fi
    success "R√©pertoire correct"
}

# Menu principal
show_menu() {
    echo -e "\n${BLUE}Que voulez-vous faire ?${NC}"
    echo "1) üì• Premier d√©ploiement complet"
    echo "2) üîÑ Mettre √† jour le code (git pull)"
    echo "3) üî® Rebuild et red√©marrer"
    echo "4) üîÅ Red√©marrer l'application"
    echo "5) üìä Voir les logs"
    echo "6) üìà Voir le statut"
    echo "7) üõë Arr√™ter l'application"
    echo "8) ‚ñ∂Ô∏è  D√©marrer l'application"
    echo "9) üß™ Tester l'API"
    echo "10) üßπ Nettoyer (node_modules, dist)"
    echo "0) ‚ùå Quitter"
    echo -n "Votre choix: "
}

# Premier d√©ploiement
first_deploy() {
    info "D√©but du premier d√©ploiement..."
    
    # Installer les d√©pendances
    info "Installation des d√©pendances..."
    npm install
    if [ $? -eq 0 ]; then
        success "D√©pendances install√©es"
    else
        error "Erreur lors de l'installation des d√©pendances"
        return 1
    fi
    
    # V√©rifier si .env existe
    if [ ! -f ".env" ]; then
        error "Le fichier .env n'existe pas !"
        info "Copiez env.example vers .env et configurez-le"
        echo "cp env.example .env"
        echo "nano .env"
        return 1
    fi
    success "Fichier .env trouv√©"
    
    # Cr√©er le dossier logs
    mkdir -p logs
    success "Dossier logs cr√©√©"
    
    # Build
    info "Compilation TypeScript..."
    npm run build
    if [ $? -eq 0 ]; then
        success "Build r√©ussi"
    else
        error "Erreur lors du build"
        return 1
    fi
    
    # D√©marrer avec PM2
    info "D√©marrage avec PM2..."
    if [ -f "ecosystem.config.js" ]; then
        pm2 start ecosystem.config.js
    else
        pm2 start dist/server.js --name "$PM2_NAME"
    fi
    
    if [ $? -eq 0 ]; then
        success "Application d√©marr√©e avec PM2"
        pm2 save
        info "Configuration PM2 sauvegard√©e"
    else
        error "Erreur lors du d√©marrage"
        return 1
    fi
    
    success "Premier d√©ploiement termin√© !"
    info "N'oubliez pas de configurer Nginx et le firewall"
}

# Mettre √† jour le code
update_code() {
    info "Mise √† jour du code..."
    
    # Sauvegarder les changements locaux
    git stash
    
    # Pull
    git pull origin main
    if [ $? -eq 0 ]; then
        success "Code mis √† jour"
    else
        error "Erreur lors du git pull"
        return 1
    fi
    
    # R√©installer les d√©pendances
    info "Mise √† jour des d√©pendances..."
    npm install
    
    # Rebuild
    info "Recompilation..."
    npm run build
    
    # Red√©marrer
    info "Red√©marrage de l'application..."
    pm2 restart "$PM2_NAME"
    
    success "Mise √† jour termin√©e !"
}

# Rebuild et red√©marrer
rebuild() {
    info "Rebuild et red√©marrage..."
    
    # Build
    npm run build
    if [ $? -eq 0 ]; then
        success "Build r√©ussi"
    else
        error "Erreur lors du build"
        return 1
    fi
    
    # Red√©marrer
    pm2 restart "$PM2_NAME"
    success "Application red√©marr√©e"
}

# Red√©marrer
restart() {
    info "Red√©marrage de l'application..."
    pm2 restart "$PM2_NAME"
    success "Application red√©marr√©e"
}

# Voir les logs
show_logs() {
    info "Affichage des logs (Ctrl+C pour quitter)..."
    pm2 logs "$PM2_NAME"
}

# Voir le statut
show_status() {
    info "Statut de l'application:"
    pm2 status "$PM2_NAME"
    echo ""
    pm2 show "$PM2_NAME"
}

# Arr√™ter
stop() {
    info "Arr√™t de l'application..."
    pm2 stop "$PM2_NAME"
    success "Application arr√™t√©e"
}

# D√©marrer
start() {
    info "D√©marrage de l'application..."
    if [ -f "ecosystem.config.js" ]; then
        pm2 start ecosystem.config.js
    else
        pm2 start dist/server.js --name "$PM2_NAME"
    fi
    success "Application d√©marr√©e"
}

# Tester l'API
test_api() {
    info "Test de l'API..."
    echo ""
    
    # Test local
    echo -e "${BLUE}Test local (localhost:3000):${NC}"
    curl -s http://localhost:3000/health | json_pp 2>/dev/null || curl -s http://localhost:3000/health
    echo ""
    
    # Test via Nginx (si disponible)
    echo -e "${BLUE}Test via Nginx:${NC}"
    if command -v curl &> /dev/null; then
        # Essayer de d√©tecter l'IP ou le domaine
        PUBLIC_IP=$(curl -s ifconfig.me 2>/dev/null)
        if [ -n "$PUBLIC_IP" ]; then
            echo "IP publique: $PUBLIC_IP"
            curl -s "http://$PUBLIC_IP/health" | json_pp 2>/dev/null || curl -s "http://$PUBLIC_IP/health"
        fi
    fi
    echo ""
}

# Nettoyer
clean() {
    info "Nettoyage..."
    read -p "√ätes-vous s√ªr de vouloir supprimer node_modules et dist ? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf node_modules dist
        success "Nettoyage termin√©"
        info "Ex√©cutez 'npm install' et 'npm run build' pour reconstruire"
    else
        info "Nettoyage annul√©"
    fi
}

# V√©rifier si PM2 est install√©
check_pm2() {
    if ! command -v pm2 &> /dev/null; then
        error "PM2 n'est pas install√©"
        info "Installez PM2 avec: sudo npm install -g pm2"
        exit 1
    fi
}

# Script principal
main() {
    check_directory
    check_pm2
    
    while true; do
        show_menu
        read choice
        
        case $choice in
            1)
                first_deploy
                ;;
            2)
                update_code
                ;;
            3)
                rebuild
                ;;
            4)
                restart
                ;;
            5)
                show_logs
                ;;
            6)
                show_status
                ;;
            7)
                stop
                ;;
            8)
                start
                ;;
            9)
                test_api
                ;;
            10)
                clean
                ;;
            0)
                info "Au revoir !"
                exit 0
                ;;
            *)
                error "Choix invalide"
                ;;
        esac
        
        echo ""
        read -p "Appuyez sur Entr√©e pour continuer..."
    done
}

# Ex√©cuter le script
main

