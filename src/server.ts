import dotenv from 'dotenv';
import createApp from './app';
import connectDatabase from './config/database';

// Charger les variables d'environnement
dotenv.config();

/**
 * D√©marrage du serveur
 */
const startServer = async () => {
  try {
    // Connexion √† la base de donn√©es
    await connectDatabase();

    // Cr√©er l'application Express
    const app = createApp();

    // Port du serveur
    const PORT = parseInt(process.env.PORT || '3000', 10);

    // D√©marrer le serveur sur toutes les interfaces (0.0.0.0)
    const server = app.listen(PORT, '0.0.0.0', () => {
      console.log('');
      console.log('üöó ====================================== üöó');
      console.log(`   üöÄ Serveur d√©marr√© avec succ√®s !`);
      console.log(`   üì° Port: ${PORT}`);
      console.log(`   üåç Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`   üìù API Local: http://localhost:${PORT}/api`);
      console.log(`   üì± API Wi-Fi: http://192.168.1.14:${PORT}/api`);
      console.log(`   ‚ù§Ô∏è  Health: http://localhost:${PORT}/health`);
      console.log('üöó ====================================== üöó');
      console.log('');
    });

    // Gestion de l'arr√™t gracieux
    const gracefulShutdown = async (signal: string) => {
      console.log(`\n‚ö†Ô∏è  Signal ${signal} re√ßu. Arr√™t du serveur...`);
      
      server.close(async () => {
        console.log('üîí Serveur HTTP ferm√©');
        
        try {
          // Fermer la connexion MongoDB
          const mongoose = await import('mongoose');
          await mongoose.default.connection.close();
          console.log('üîí Connexion MongoDB ferm√©e');
          
          console.log('‚úÖ Arr√™t gracieux termin√©');
          process.exit(0);
        } catch (error) {
          console.error('‚ùå Erreur lors de l\'arr√™t:', error);
          process.exit(1);
        }
      });

      // Forcer l'arr√™t apr√®s 10 secondes
      setTimeout(() => {
        console.error('‚ö†Ô∏è  Arr√™t forc√© apr√®s timeout');
        process.exit(1);
      }, 10000);
    };

    // √âcouter les signaux d'arr√™t
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // Gestion des erreurs non g√©r√©es
    process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
      console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
      // Ne pas arr√™ter le serveur en production
      if (process.env.NODE_ENV === 'development') {
        gracefulShutdown('unhandledRejection');
      }
    });

    process.on('uncaughtException', (error: Error) => {
      console.error('‚ùå Uncaught Exception:', error);
      gracefulShutdown('uncaughtException');
    });

  } catch (error) {
    console.error('‚ùå Erreur fatale lors du d√©marrage du serveur:', error);
    process.exit(1);
  }
};

// D√©marrer le serveur
startServer();

